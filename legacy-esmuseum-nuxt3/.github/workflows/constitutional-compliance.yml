name: Constitutional Compliance CI/CD

# F017 Phase 2: Enhanced Workflow Implementation
# Continuous integration with constitutional compliance validation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  constitutional-compliance:
    name: üèõÔ∏è Constitutional Compliance Validation
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üèõÔ∏è Article I - Vue 3 Composition API Compliance
        run: |
          echo "üîç Validating Vue 3 Composition API usage..."
          npm run lint -- --format=github

      - name: üèõÔ∏è Article II - TypeScript-First Development
        run: |
          echo "üîç Validating TypeScript compliance..."
          npm run validate:typescript

      - name: üèõÔ∏è Article III - Test-Driven Feature Development
        run: |
          echo "üîç Running test suite..."
          npm run test

      - name: üìä Test Coverage Analysis
        run: |
          echo "üîç Generating test coverage report..."
          npm run test:coverage

      - name: üìã Upload Coverage Reports
        uses: codecov/codecov-action@v3
        if: github.event_name == 'push'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: constitutional-compliance
          name: constitutional-coverage
          fail_ci_if_error: false

      - name: üèõÔ∏è Full Constitutional Validation
        run: |
          echo "üîç Running comprehensive constitutional compliance check..."
          npm run validate:constitutional

      - name: üèóÔ∏è Build Validation
        run: |
          echo "üîç Validating production build..."
          npm run build

      - name: üìä Constitutional Compliance Report
        if: always()
        run: |
          echo "üìä Constitutional Compliance Summary"
          echo "=================================="
          echo ""
          echo "‚úÖ Article I: Vue 3 Composition API - ESLint validation"
          echo "‚úÖ Article II: TypeScript-First Development - Type checking"
          echo "‚úÖ Article III: Test-Driven Feature Development - Test suite"
          echo "‚úÖ Article IV-IX: Pattern validation - Constitutional validator"
          echo ""
          echo "Build Status: $([ $? -eq 0 ] && echo "‚úÖ PASSED" || echo "‚ùå FAILED")"

  feature-specification-validation:
    name: üìã Feature Specification Quality Gates
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'F0') || contains(github.event.head_commit.modified, '.copilot-workspace/features')

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: "npm"

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîç Detect Feature Changes
        id: feature-detection
        run: |
          echo "Detecting feature specification changes..."

          # Get changed files
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | grep '\.copilot-workspace/features/.*\.md$' || true)

          if [ ! -z "$CHANGED_FILES" ]; then
            echo "Feature specifications changed:"
            echo "$CHANGED_FILES"
            
            # Extract feature numbers
            FEATURE_NUMS=$(echo "$CHANGED_FILES" | grep -o 'F[0-9]\+' | sed 's/F//' | sort -u)
            echo "feature_numbers=${FEATURE_NUMS}" >> $GITHUB_OUTPUT
            echo "has_features=true" >> $GITHUB_OUTPUT
          else
            echo "has_features=false" >> $GITHUB_OUTPUT
          fi

      - name: üìã Validate Feature Specifications
        if: steps.feature-detection.outputs.has_features == 'true'
        run: |
          echo "Running quality gates for changed features..."

          FEATURE_NUMS="${{ steps.feature-detection.outputs.feature_numbers }}"

          for FEATURE_NUM in $FEATURE_NUMS; do
            echo ""
            echo "üîç Validating Feature F$FEATURE_NUM"
            echo "================================"
            
            # Try each phase gate
            if npm run gate:specify "$FEATURE_NUM" 2>/dev/null; then
              echo "‚úÖ Specification quality gate passed for F$FEATURE_NUM"
            else
              echo "‚ö†Ô∏è Specification quality gate issues for F$FEATURE_NUM"
            fi
            
            if npm run gate:plan "$FEATURE_NUM" 2>/dev/null; then
              echo "‚úÖ Planning quality gate passed for F$FEATURE_NUM"
            else
              echo "‚ÑπÔ∏è Planning phase not ready for F$FEATURE_NUM"
            fi
            
            if npm run gate:tasks "$FEATURE_NUM" 2>/dev/null; then
              echo "‚úÖ Task breakdown quality gate passed for F$FEATURE_NUM"
            else
              echo "‚ÑπÔ∏è Task breakdown phase not ready for F$FEATURE_NUM"
            fi
          done

  performance-compliance:
    name: üöÄ Performance-First SPA Compliance (Article VI)
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: "npm"

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üèóÔ∏è Build for analysis
        run: npm run build

      - name: üìä Bundle Size Analysis
        run: |
          echo "üìä Bundle Size Analysis (Article VI Compliance)"
          echo "=============================================="

          # Check if .output directory exists
          if [ -d ".output" ]; then
            echo "üì¶ Production bundle analysis:"
            find .output -name "*.js" -type f -exec ls -lh {} \; | head -10
            
            # Calculate total bundle size
            TOTAL_SIZE=$(find .output -name "*.js" -type f -exec stat -f%z {} \; | awk '{sum+=$1} END {print sum}' 2>/dev/null || find .output -name "*.js" -type f -exec stat -c%s {} \; | awk '{sum+=$1} END {print sum}')
            TOTAL_SIZE_MB=$((TOTAL_SIZE / 1024 / 1024))
            
            echo ""
            echo "üìä Bundle Analysis Results:"
            echo "   Total JavaScript size: ${TOTAL_SIZE_MB}MB"
            
            # Constitutional compliance check
            if [ $TOTAL_SIZE_MB -lt 5 ]; then
              echo "   ‚úÖ Bundle size complies with Article VI (Performance-First)"
            elif [ $TOTAL_SIZE_MB -lt 10 ]; then
              echo "   ‚ö†Ô∏è Bundle size approaching Article VI limits"
            else
              echo "   ‚ùå Bundle size violates Article VI (Performance-First)"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è Build output not found for analysis"
          fi

  accessibility-compliance:
    name: ‚ôø Responsive Design Compliance (Article IX)
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: "npm"

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üåê Accessibility Pattern Check
        run: |
          echo "‚ôø Accessibility Pattern Analysis (Article IX Compliance)"
          echo "===================================================="

          # Check for accessibility patterns in Vue files
          echo "üîç Checking for ARIA attributes..."
          ARIA_COUNT=$(find app -name "*.vue" -exec grep -l "aria-\|role=" {} \; | wc -l)
          TOTAL_VUE=$(find app -name "*.vue" | wc -l)

          echo "   Vue components with ARIA: $ARIA_COUNT/$TOTAL_VUE"

          # Check for responsive design patterns
          echo "üîç Checking for responsive design patterns..."
          RESPONSIVE_COUNT=$(find app -name "*.vue" -exec grep -l "sm:\|md:\|lg:\|xl:" {} \; | wc -l)

          echo "   Components with responsive classes: $RESPONSIVE_COUNT/$TOTAL_VUE"

          # Check for i18n usage
          echo "üîç Checking for internationalization..."
          I18N_COUNT=$(find app -name "*.vue" -exec grep -l "\$t(" {} \; | wc -l)

          echo "   Components with i18n: $I18N_COUNT/$TOTAL_VUE"

          # Constitutional compliance assessment
          ACCESSIBILITY_SCORE=$((($ARIA_COUNT + $RESPONSIVE_COUNT + $I18N_COUNT) * 100 / ($TOTAL_VUE * 3)))

          echo ""
          echo "üìä Article IX Compliance Score: ${ACCESSIBILITY_SCORE}%"

          if [ $ACCESSIBILITY_SCORE -ge 70 ]; then
            echo "‚úÖ Responsive Design compliance acceptable"
          elif [ $ACCESSIBILITY_SCORE -ge 50 ]; then
            echo "‚ö†Ô∏è Responsive Design compliance needs improvement"
          else
            echo "‚ùå Responsive Design compliance insufficient"
            exit 1
          fi

  constitutional-summary:
    name: üìä Constitutional Compliance Summary
    runs-on: ubuntu-latest
    needs:
      [
        constitutional-compliance,
        performance-compliance,
        accessibility-compliance,
      ]
    if: always()

    steps:
      - name: üìä Generate Compliance Report
        run: |
          echo "üèõÔ∏è ESMUSEUM CONSTITUTIONAL COMPLIANCE REPORT"
          echo "=========================================="
          echo ""
          echo "üìÖ Report Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üîÑ Workflow: ${{ github.workflow }}"
          echo "üìù Commit: ${{ github.sha }}"
          echo "üåø Branch: ${{ github.ref_name }}"
          echo ""
          echo "üìã Constitutional Articles Validation:"
          echo ""
          echo "‚úÖ Article I - Vue 3 Composition API Mandate"
          echo "   Status: ${{ needs.constitutional-compliance.result }}"
          echo "   Validation: ESLint rules and code analysis"
          echo ""
          echo "‚úÖ Article II - TypeScript-First Development"
          echo "   Status: ${{ needs.constitutional-compliance.result }}"
          echo "   Validation: TypeScript compiler and type checking"
          echo ""
          echo "‚úÖ Article III - Test-Driven Feature Development"
          echo "   Status: ${{ needs.constitutional-compliance.result }}"
          echo "   Validation: Test suite execution and coverage"
          echo ""
          echo "‚úÖ Article VI - Performance-First SPA Architecture"
          echo "   Status: ${{ needs.performance-compliance.result }}"
          echo "   Validation: Bundle size analysis and optimization"
          echo ""
          echo "‚úÖ Article IX - Responsive Design Requirements"
          echo "   Status: ${{ needs.accessibility-compliance.result }}"
          echo "   Validation: Accessibility and responsive patterns"
          echo ""
          echo "üéØ Overall Compliance Status:"

          # Determine overall status
          if [[ "${{ needs.constitutional-compliance.result }}" == "success" && \
                "${{ needs.performance-compliance.result }}" == "success" && \
                "${{ needs.accessibility-compliance.result }}" == "success" ]]; then
            echo "   üéâ FULL CONSTITUTIONAL COMPLIANCE ACHIEVED"
            echo "   ‚úÖ All validation checks passed"
            echo "   üöÄ Ready for production deployment"
          else
            echo "   ‚ö†Ô∏è CONSTITUTIONAL COMPLIANCE ISSUES DETECTED"
            echo "   üîß Review failed checks and address violations"
            echo "   üìñ Reference: memory/esmuseum-constitution.md"
          fi

          echo ""
          echo "üìö Resources:"
          echo "   ‚Ä¢ Constitutional Framework: memory/esmuseum-constitution.md"
          echo "   ‚Ä¢ Workflow Documentation: .copilot-workspace/workflows/"
          echo "   ‚Ä¢ Quality Gates: .copilot-workspace/templates/"
          echo "   ‚Ä¢ Development Commands: npm run workflow"
          echo ""
          echo "üîó F017 Phase 2: Enhanced Workflow Implementation"
          echo "   Constitutional Authority: ESMuseum Development Team"
