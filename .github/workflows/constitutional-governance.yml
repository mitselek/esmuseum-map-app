# Constitutional Governance Workflow
# F017 Phase 3: Quality Gates & Monitoring

name: Constitutional Governance

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [feature/*, hotfix/*, release/*]
  workflow_dispatch:
    inputs:
      compliance_level:
        description: "Compliance validation level"
        required: false
        default: "standard"
        type: choice
        options:
          - minimal
          - standard
          - strict
          - maximum

env:
  NODE_VERSION: "18"
  CONSTITUTIONAL_MIN_COMPLIANCE: 90

jobs:
  branch-validation:
    name: Constitutional Branch Validation
    runs-on: ubuntu-latest

    outputs:
      branch-type: ${{ steps.validate-branch.outputs.branch-type }}
      compliance-required: ${{ steps.validate-branch.outputs.compliance-required }}
      quality-gates: ${{ steps.validate-branch.outputs.quality-gates }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Validate Branch Pattern
        id: validate-branch
        run: |
          echo "üèõÔ∏è Validating constitutional branch pattern..."

          # Get branch name
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BRANCH_NAME="${{ github.head_ref }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
          fi

          echo "Branch: $BRANCH_NAME"

          # Validate branch pattern and set outputs
          if [[ $BRANCH_NAME =~ ^feature/F[0-9]+-(.+)$ ]]; then
            echo "branch-type=feature" >> $GITHUB_OUTPUT
            echo "compliance-required=90" >> $GITHUB_OUTPUT
            echo "quality-gates=feature,progressive" >> $GITHUB_OUTPUT
            echo "‚úÖ Valid feature branch pattern"
          elif [[ $BRANCH_NAME =~ ^hotfix/(.+)$ ]]; then
            echo "branch-type=hotfix" >> $GITHUB_OUTPUT
            echo "compliance-required=85" >> $GITHUB_OUTPUT
            echo "quality-gates=minimal" >> $GITHUB_OUTPUT
            echo "‚úÖ Valid hotfix branch pattern"
          elif [[ $BRANCH_NAME =~ ^release/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "branch-type=release" >> $GITHUB_OUTPUT
            echo "compliance-required=100" >> $GITHUB_OUTPUT
            echo "quality-gates=all,advanced" >> $GITHUB_OUTPUT
            echo "‚úÖ Valid release branch pattern"
          elif [ "$BRANCH_NAME" = "main" ]; then
            echo "branch-type=main" >> $GITHUB_OUTPUT
            echo "compliance-required=100" >> $GITHUB_OUTPUT
            echo "quality-gates=all,advanced" >> $GITHUB_OUTPUT
            echo "‚úÖ Main branch"
          elif [ "$BRANCH_NAME" = "develop" ]; then
            echo "branch-type=develop" >> $GITHUB_OUTPUT
            echo "compliance-required=95" >> $GITHUB_OUTPUT
            echo "quality-gates=integration,basic" >> $GITHUB_OUTPUT
            echo "‚úÖ Develop branch"
          else
            echo "branch-type=unknown" >> $GITHUB_OUTPUT
            echo "compliance-required=90" >> $GITHUB_OUTPUT
            echo "quality-gates=standard" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Non-constitutional branch pattern: $BRANCH_NAME"
          fi

  constitutional-compliance:
    name: Constitutional Compliance Validation
    runs-on: ubuntu-latest
    needs: branch-validation

    outputs:
      compliance-score: ${{ steps.compliance-check.outputs.compliance-score }}
      compliance-status: ${{ steps.compliance-check.outputs.compliance-status }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Constitutional Compliance Check
        id: compliance-check
        run: |
          echo "üèõÔ∏è Running constitutional compliance validation..."
          echo "Required compliance: ${{ needs.branch-validation.outputs.compliance-required }}%"
          echo "Quality gates: ${{ needs.branch-validation.outputs.quality-gates }}"

          # Run constitutional validation
          npm run validate:constitutional | tee compliance-output.txt

          # Extract compliance score
          COMPLIANCE_SCORE=$(grep -o "Score: [0-9]\+%" compliance-output.txt | grep -o "[0-9]\+" || echo "0")
          echo "compliance-score=$COMPLIANCE_SCORE" >> $GITHUB_OUTPUT
          echo "üìä Current compliance: ${COMPLIANCE_SCORE}%"

          # Check if compliance meets requirements
          REQUIRED_COMPLIANCE=${{ needs.branch-validation.outputs.compliance-required }}
          if [ "$COMPLIANCE_SCORE" -ge "$REQUIRED_COMPLIANCE" ]; then
            echo "compliance-status=passed" >> $GITHUB_OUTPUT
            echo "‚úÖ Constitutional compliance requirements met"
          else
            echo "compliance-status=failed" >> $GITHUB_OUTPUT
            echo "‚ùå Constitutional compliance below required ${REQUIRED_COMPLIANCE}%"
            echo "üìà Gap: $((REQUIRED_COMPLIANCE - COMPLIANCE_SCORE))% improvement needed"
          fi

      - name: Upload Compliance Report
        uses: actions/upload-artifact@v4
        with:
          name: constitutional-compliance-report
          path: compliance-output.txt
          retention-days: 30

  quality-gates:
    name: Quality Gates Validation
    runs-on: ubuntu-latest
    needs: [branch-validation, constitutional-compliance]
    if: needs.constitutional-compliance.outputs.compliance-status == 'passed'

    strategy:
      matrix:
        gate:
          - eslint
          - typescript
          - tests
          - feature-specific

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: ESLint Quality Gate
        if: matrix.gate == 'eslint'
        run: |
          echo "üîß Running ESLint constitutional rules..."
          npm run lint 2>&1 | tee eslint-output.txt || echo "ESLint issues found"

          # Count ESLint errors (non-zero exit is expected with issues)
          ERROR_COUNT=$(grep -c "error" eslint-output.txt || echo "0")
          echo "ESLint errors: $ERROR_COUNT"

          if [ "$ERROR_COUNT" -gt 50 ]; then
            echo "‚ùå Too many ESLint errors ($ERROR_COUNT > 50)"
            exit 1
          else
            echo "‚úÖ ESLint errors within acceptable range ($ERROR_COUNT ‚â§ 50)"
          fi

      - name: TypeScript Quality Gate
        if: matrix.gate == 'typescript'
        run: |
          echo "üìù Running TypeScript constitutional validation..."
          npm run validate:typescript || echo "TypeScript issues found"

      - name: Test Suite Quality Gate
        if: matrix.gate == 'tests'
        run: |
          echo "üß™ Running test suite..."
          npm run test 2>&1 | tee test-output.txt || echo "Test issues found"

          # Check if critical tests are passing
          if grep -q "FAIL" test-output.txt; then
            FAIL_COUNT=$(grep -c "FAIL" test-output.txt)
            echo "‚ö†Ô∏è Test failures detected: $FAIL_COUNT"
            
            # Allow some test failures for feature branches
            if [ "${{ needs.branch-validation.outputs.branch-type }}" = "feature" ] && [ "$FAIL_COUNT" -le 3 ]; then
              echo "‚úÖ Test failures within acceptable range for feature branch"
            else
              echo "‚ùå Too many test failures for ${{ needs.branch-validation.outputs.branch-type }} branch"
              exit 1
            fi
          else
            echo "‚úÖ All tests passing"
          fi

      - name: Feature-Specific Quality Gate
        if: matrix.gate == 'feature-specific' && needs.branch-validation.outputs.branch-type == 'feature'
        run: |
          echo "üîç Running feature-specific quality gates..."

          # Extract feature number from branch name
          BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
          FEATURE_NUM=$(echo "$BRANCH_NAME" | grep -o 'F[0-9]\+' | sed 's/F//' || echo "")

          if [ -n "$FEATURE_NUM" ]; then
            echo "Feature: F$FEATURE_NUM"
            
            # Check if feature specification exists
            SPEC_FILE=".copilot-workspace/features/F$(printf "%03d" $FEATURE_NUM)-*.md"
            if ls $SPEC_FILE 1> /dev/null 2>&1; then
              echo "‚úÖ Feature specification found"
              
              # Run feature-specific quality gates
              if command -v "npm run gate:feature" &> /dev/null; then
                npm run gate:feature $FEATURE_NUM || echo "Feature quality gates need attention"
              else
                echo "‚ÑπÔ∏è Feature quality gates not yet implemented"
              fi
            else
              echo "‚ö†Ô∏è Feature specification not found for F$FEATURE_NUM"
            fi
          else
            echo "‚ö†Ô∏è Could not extract feature number from branch name"
          fi

  advanced-quality-gates:
    name: Advanced Quality Gates
    runs-on: ubuntu-latest
    needs: [branch-validation, constitutional-compliance, quality-gates]
    if: |
      needs.constitutional-compliance.outputs.compliance-status == 'passed' &&
      (needs.branch-validation.outputs.branch-type == 'main' || 
       needs.branch-validation.outputs.branch-type == 'release' ||
       github.event_name == 'pull_request' && github.base_ref == 'main')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Performance Budget Validation
        run: |
          echo "üöÄ Validating performance budget..."

          # Basic bundle size check
          npm run build 2>&1 | tee build-output.txt || echo "Build completed with warnings"

          # Extract bundle size information (if available)
          if grep -q "Total bundle size" build-output.txt; then
            echo "‚úÖ Bundle size information available"
          else
            echo "‚ÑπÔ∏è Bundle size analysis not yet implemented"
          fi

      - name: Accessibility Compliance Check
        run: |
          echo "‚ôø Validating accessibility compliance..."

          # Basic accessibility patterns check
          echo "Checking for ARIA attributes and semantic HTML..."

          # Count accessibility patterns in Vue files
          ARIA_COUNT=$(find app -name "*.vue" -exec grep -l "aria-\|role=" {} \; | wc -l)
          SEMANTIC_COUNT=$(find app -name "*.vue" -exec grep -l "<nav\|<main\|<section\|<article\|<header\|<footer" {} \; | wc -l)

          echo "Files with ARIA attributes: $ARIA_COUNT"
          echo "Files with semantic HTML: $SEMANTIC_COUNT"

          if [ "$ARIA_COUNT" -gt 0 ] && [ "$SEMANTIC_COUNT" -gt 0 ]; then
            echo "‚úÖ Accessibility patterns detected"
          else
            echo "‚ö†Ô∏è Limited accessibility patterns found"
          fi

  compliance-reporting:
    name: Generate Compliance Report
    runs-on: ubuntu-latest
    needs: [branch-validation, constitutional-compliance, quality-gates]
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Compliance Artifacts
        uses: actions/download-artifact@v4
        with:
          name: constitutional-compliance-report
          path: ./reports/
        continue-on-error: true

      - name: Generate Compliance Report
        run: |
          echo "üìã Generating constitutional compliance report..."

          mkdir -p reports
          cat > reports/compliance-summary.md << EOF
          # üèõÔ∏è Constitutional Compliance Report

          **Branch**: ${{ github.head_ref || github.ref_name }}
          **Type**: ${{ needs.branch-validation.outputs.branch-type }}
          **Required Compliance**: ${{ needs.branch-validation.outputs.compliance-required }}%
          **Actual Compliance**: ${{ needs.constitutional-compliance.outputs.compliance-score }}%
          **Status**: ${{ needs.constitutional-compliance.outputs.compliance-status }}
          **Quality Gates**: ${{ needs.branch-validation.outputs.quality-gates }}

          ## Constitutional Articles Status

          - **Article I**: Vue 3 Composition API Mandate
          - **Article II**: TypeScript-First Development
          - **Article III**: Test-Driven Feature Development
          - **Article IV**: i18n-First User Interface
          - **Article V**: Entu API Integration Standards
          - **Article VI**: Performance-First SPA Architecture
          - **Article VII**: Component Modularity Principle
          - **Article VIII**: Documentation-Driven Development
          - **Article IX**: Responsive Design Requirements
          - **Article X**: Professional Documentation Standards

          ## Quality Gate Results

          - **ESLint**: ${{ needs.quality-gates.result }}
          - **TypeScript**: ${{ needs.quality-gates.result }}
          - **Tests**: ${{ needs.quality-gates.result }}
          - **Feature-Specific**: ${{ needs.quality-gates.result }}

          ---

          *Generated by F017 Phase 3: Constitutional Governance*
          EOF

          echo "‚úÖ Compliance report generated"

      - name: Comment PR with Compliance Report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const report = fs.readFileSync('reports/compliance-summary.md', 'utf8');
              
              // Check if compliance passed
              const complianceStatus = '${{ needs.constitutional-compliance.outputs.compliance-status }}';
              const emoji = complianceStatus === 'passed' ? '‚úÖ' : '‚ùå';
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `${emoji} ${report}`
              });
            } catch (error) {
              console.log('Could not read compliance report:', error.message);
              
              // Fallback simple comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## üèõÔ∏è Constitutional Compliance Check\n\n**Status**: ${{ needs.constitutional-compliance.outputs.compliance-status }}\n**Compliance**: ${{ needs.constitutional-compliance.outputs.compliance-score }}%\n**Required**: ${{ needs.branch-validation.outputs.compliance-required }}%`
              });
            }

      - name: Upload Final Reports
        uses: actions/upload-artifact@v4
        with:
          name: constitutional-governance-reports
          path: reports/
          retention-days: 90

  deployment-gate:
    name: Constitutional Deployment Gate
    runs-on: ubuntu-latest
    needs:
      [
        branch-validation,
        constitutional-compliance,
        quality-gates,
        advanced-quality-gates,
      ]
    if: |
      needs.constitutional-compliance.outputs.compliance-status == 'passed' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Constitutional Deployment Approval
        run: |
          echo "üöÄ Constitutional deployment gate passed"
          echo "‚úÖ All constitutional requirements met"
          echo "‚úÖ Quality gates validated"
          echo "‚úÖ Advanced quality gates completed"
          echo ""
          echo "üèõÔ∏è Ready for deployment with constitutional compliance"
