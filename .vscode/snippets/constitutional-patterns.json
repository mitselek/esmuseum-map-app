{
  "Constitutional Vue Component": {
    "prefix": "const-component",
    "body": [
      "<script setup lang=\"ts\">",
      "// CONSTITUTIONAL: Article I - Vue 3 Composition API Mandate",
      "// CONSTITUTIONAL: Article II - TypeScript-First Development",
      "",
      "interface ${1:ComponentName}Props {",
      "  ${2:propName}: ${3:PropType};",
      "}",
      "",
      "interface ${1:ComponentName}Emits {",
      "  ${4:eventName}: [${5:EventType}];",
      "}",
      "",
      "const props = defineProps<${1:ComponentName}Props>();",
      "const emit = defineEmits<${1:ComponentName}Emits>();",
      "",
      "// CONSTITUTIONAL: Article III - Test-Driven Feature Development",
      "// Contract: ${6:Describe component contract here}",
      "",
      "// CONSTITUTIONAL: Article VII - Component Modularity Principle",
      "// Responsibility: ${7:Single responsibility description}",
      "",
      "${8:// Component logic}",
      "</script>",
      "",
      "<template>",
      "  <!-- CONSTITUTIONAL: Article IV - i18n-First User Interface -->",
      "  <!-- CONSTITUTIONAL: Article IX - Responsive Design Requirements -->",
      "  <div class=\"${9:tailwind-classes}\">",
      "    {{ \\$t('${10:translation.key}') }}",
      "    ${11:<!-- Template content -->}",
      "  </div>",
      "</template>",
      "",
      "<!-- CONSTITUTIONAL: Article VI - Performance-First SPA Architecture -->",
      "<!-- Component size: Keep under 200 lines per Article VII -->"
    ],
    "description": "Create a Vue component following all constitutional articles"
  },

  "Constitutional Composable": {
    "prefix": "const-composable",
    "body": [
      "// CONSTITUTIONAL: Article I - Vue 3 Composition API Mandate",
      "// CONSTITUTIONAL: Article II - TypeScript-First Development",
      "",
      "import type { Ref } from 'vue';",
      "",
      "interface ${1:ComposableName}State {",
      "  ${2:stateProperty}: ${3:StateType};",
      "}",
      "",
      "interface ${1:ComposableName}Return {",
      "  ${4:returnProperty}: Ref<${5:ReturnType}>;",
      "  ${6:methodName}: (${7:params}) => ${8:ReturnType};",
      "}",
      "",
      "/**",
      " * ${9:Composable description}",
      " * ",
      " * CONSTITUTIONAL COMPLIANCE:",
      " * - Article I: Vue 3 Composition API patterns",
      " * - Article II: TypeScript interfaces and type safety",
      " * - Article III: Contract-first development",
      " * - Article VII: Single responsibility principle",
      " */",
      "export const use${1:ComposableName} = (): ${1:ComposableName}Return => {",
      "  const state = reactive<${1:ComposableName}State>({",
      "    ${2:stateProperty}: ${10:defaultValue},",
      "  });",
      "",
      "  // CONSTITUTIONAL: Article V - Entu API Integration Standards (if applicable)",
      "  const { callApi } = useEntuApi();",
      "",
      "  const ${6:methodName} = async (${7:params}) => {",
      "    // CONSTITUTIONAL: Article III - Test-Driven Feature Development",
      "    // Contract: ${11:Method contract description}",
      "    ${12:// Implementation}",
      "  };",
      "",
      "  return {",
      "    ${4:returnProperty}: readonly(toRef(state, '${2:stateProperty}')),",
      "    ${6:methodName},",
      "  };",
      "};"
    ],
    "description": "Create a composable following constitutional compliance patterns"
  },

  "TypeScript Interface": {
    "prefix": "const-interface",
    "body": [
      "// CONSTITUTIONAL: Article II - TypeScript-First Development",
      "",
      "/**",
      " * ${1:Interface description}",
      " * ",
      " * CONSTITUTIONAL COMPLIANCE:",
      " * - Article II: Explicit type definitions",
      " * - Article V: API integration standards (if applicable)",
      " */",
      "export interface ${2:InterfaceName} {",
      "  /**",
      "   * ${3:Property description}",
      "   */",
      "  ${4:propertyName}: ${5:PropertyType};",
      "",
      "  /**",
      "   * ${6:Optional property description}",
      "   */",
      "  ${7:optionalProperty}?: ${8:OptionalType};",
      "",
      "  /**",
      "   * ${9:Method description}",
      "   */",
      "  ${10:methodName}: (${11:params}: ${12:ParamType}) => ${13:ReturnType};",
      "}"
    ],
    "description": "Create TypeScript interface with constitutional compliance documentation"
  },

  "Contract Test": {
    "prefix": "const-test-contract",
    "body": [
      "// CONSTITUTIONAL: Article III - Test-Driven Feature Development",
      "",
      "import { describe, it, expect } from 'vitest';",
      "import type { ${1:InterfaceType} } from '${2:import-path}';",
      "",
      "describe('${3:ComponentOrFunction} Contract', () => {",
      "  // CONSTITUTIONAL: Article III - Contract-first testing",
      "  // Contract: ${4:Describe the contract being tested}",
      "",
      "  it('should satisfy interface contract', () => {",
      "    // Arrange",
      "    const ${5:instance}: ${1:InterfaceType} = {",
      "      ${6:// Interface implementation}",
      "    };",
      "",
      "    // Act & Assert",
      "    expect(${5:instance}).toBeDefined();",
      "    expect(typeof ${5:instance}.${7:method}).toBe('function');",
      "    ${8:// Additional contract validations}",
      "  });",
      "",
      "  it('should handle required properties', () => {",
      "    // CONSTITUTIONAL: Article II - TypeScript type safety",
      "    ${9:// Test required properties}",
      "  });",
      "",
      "  it('should validate method signatures', () => {",
      "    // CONSTITUTIONAL: Article III - Contract validation",
      "    ${10:// Test method contracts}",
      "  });",
      "});"
    ],
    "description": "Create contract tests following test-driven development principles"
  },

  "Constitutional Comment Block": {
    "prefix": "const-comment",
    "body": [
      "// CONSTITUTIONAL: Article ${1|I,II,III,IV,V,VI,VII,VIII,IX|} - ${2:Article Title}",
      "// ${3:Compliance description and rationale}",
      "${4:// Additional context if needed}"
    ],
    "description": "Add constitutional compliance comment"
  },

  "Quality Gate Checklist": {
    "prefix": "const-quality-gate",
    "body": [
      "// QUALITY_GATE: ${1:Gate Name}",
      "// [ ] ${2:Requirement 1}",
      "// [ ] ${3:Requirement 2}",
      "// [ ] ${4:Requirement 3}",
      "// COMPLIANCE: ${5:Constitutional articles addressed}"
    ],
    "description": "Add quality gate checklist"
  },

  "i18n Translation Key": {
    "prefix": "const-i18n",
    "body": [
      "// CONSTITUTIONAL: Article IV - i18n-First User Interface",
      "{{ \\$t('${1:module}.${2:key}') }}"
    ],
    "description": "Add internationalization following constitutional requirements"
  },

  "API Integration Pattern": {
    "prefix": "const-api",
    "body": [
      "// CONSTITUTIONAL: Article V - Entu API Integration Standards",
      "",
      "const { callApi, loading, error } = useEntuApi();",
      "",
      "const ${1:functionName} = async (${2:params}: ${3:ParamType}): Promise<${4:ReturnType}> => {",
      "  try {",
      "    // CONSTITUTIONAL: Article II - TypeScript-first with explicit types",
      "    const response = await callApi<${4:ReturnType}>({",
      "      method: '${5|GET,POST,PUT,DELETE|}',",
      "      url: '${6:api-endpoint}',",
      "      ${7:// Additional options}",
      "    });",
      "",
      "    return response;",
      "  } catch (apiError) {",
      "    // CONSTITUTIONAL: Article V - Proper error handling",
      "    console.error('API Error:', apiError);",
      "    throw apiError;",
      "  }",
      "};"
    ],
    "description": "Create API integration following constitutional standards"
  }
}
